import axios, { AxiosError } from 'axios';
import FormData from 'form-data';

class InvalidRequestError extends Error {
  constructor(message, data) {
    super(message);
    this.errorInfo = data;
  }
}
class InternalServerError extends Error {
  constructor(message, data) {
    super(message);
    this.errorInfo = data;
  }
}
const getImageForm = async (params, route, baseURL, authHeader) => {
  const formData = new FormData();
  for (const [key, val] of Object.entries(params)) {
    formData.append(key, val);
  }
  const headers = {
    "Content-Type": "multipart/form-data",
    "Authorization": authHeader
  };
  try {
    const res = await axios.post(
      baseURL + route,
      formData,
      { headers, responseType: "arraybuffer" }
    );
    return Buffer.from(res.data, "binary");
  } catch (err) {
    if (err instanceof AxiosError && axios.isAxiosError(err) && err.response) {
      const status = err.response.status;
      const jsonError = JSON.parse(
        String.fromCharCode.apply(
          null,
          Array.from(new Uint8Array(err.response.data))
        )
      );
      if (status >= 400 && status < 500) {
        throw new InvalidRequestError(
          "Invalid request",
          jsonError
        );
      } else {
        throw new InternalServerError(
          "Internal Server Error",
          jsonError
        );
      }
    } else {
      throw new Error(err);
    }
  }
};
class Computerender {
  constructor(apiKey) {
    this.baseURL = "https://api.computerender.com/";
    if (apiKey === void 0) {
      if (process.env.CR_KEY) {
        this.authHeader = `X-API-Key ${process.env.CR_KEY}`;
      } else {
        throw new Error("No API key provided and no CR_KEY env variable found");
      }
    } else if (apiKey.startsWith("sk_")) {
      this.authHeader = `X-API-Key ${apiKey}`;
    } else if (apiKey === "use_fb_token") {
      this.authHeader = "";
    } else {
      throw new Error("apiKey format was not recognized");
    }
  }
  generateImage(params) {
    return getImageForm(params, "generate/", this.baseURL, this.authHeader);
  }
  userGenerateImage(params, fbToken) {
    return getImageForm(
      params,
      "user-generate/",
      this.baseURL,
      `Bearer ${fbToken}`
    );
  }
}

export { Computerender, InternalServerError, InvalidRequestError };
