interface BrowserFile {
    arrayBuffer: () => Promise<ArrayBuffer>;
    name: string;
}
interface ErrorResponse {
    status: ("success" | "error");
    message: string;
    errorType: string;
}
declare class InvalidRequestError extends Error {
    errorInfo: ErrorResponse;
    constructor(message: string, data: ErrorResponse);
}
declare class InternalServerError extends Error {
    errorInfo: ErrorResponse;
    constructor(message: string, data: ErrorResponse);
}
interface GenerateParams {
    prompt: string;
    seed?: number;
    w?: number;
    h?: number;
    guidance?: number;
    iterations?: number;
    eta?: number;
    img?: Buffer | BrowserFile;
    strength?: number;
    modelVersion?: string;
    extension?: "png" | "jpg";
}
declare class Computerender {
    authHeader: string;
    baseURL: string;
    constructor(apiKey?: string);
    generateImage(params: GenerateParams): Promise<Buffer>;
    userGenerateImage(params: GenerateParams, fbToken: string): Promise<Buffer>;
}

export { Computerender, InternalServerError, InvalidRequestError };
